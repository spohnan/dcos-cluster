#
# Create Base Instance (delete_on_termination for EBS vols requires Ansible 2.1+)
#
- name: Create Base Instance
  any_errors_fatal: true
  hosts: localhost
  connection: local
  vars_files:
    - "vars/{{ varfile }}"
  vars:
    - role: "dcos"
    - ec2_tag_Type: "ami"
    - ec2_tag_Cluster: "dcos"
    - new_server_names: dcos-ami
    - server_names: dcos-ami
  roles:
    - python-modules
    - aws-instances
    - aws-disks

#
# Refresh inventory (requires Ansible 2.x+)
#
- name: Pick up newly created instances in dynamic inventory
  meta: refresh_inventory

#
# Configuration and Creation of AMI
#
- name: Configuration and Creation of AMI
  hosts: "tag_Type_ami:&tag_Cluster_dcos"
  become: yes
  vars_files:
    - "vars/{{ varfile }}"
  pre_tasks:
    - name: Remove require tty
      lineinfile: regexp="Defaults\s+requiretty" dest=/etc/sudoers state=absent

    - name: Do not use DNS resolution for SSH
      lineinfile: regexp="Use\s+DNS" dest=/etc/ssh/sshd_config state=absent

    - name: Do not use DNS resolution for SSH
      lineinfile: regexp="^Use\s+DNS" dest=/etc/ssh/sshd_config  line="UseDNS no" state=present

    - name: Restart SSH
      service: name=sshd state=restarted

    - name: Turn off ipv6
      sysctl: name=net.ipv6.conf.all.disable_ipv6 value=1 state=present

    - name: Turn off ipv6
      sysctl: name=net.ipv6.conf.default.disable_ipv6 value=1 state=present

    - name: Turn down vm.swappiness setting
      sysctl: name=vm.swappiness value=5 state=present

  roles:
    - docker
    - docker-disk
    - gluster-client
  tasks:
    - name: Ensure Docker is automatically started
      service: name=docker enabled=yes

    - name: Upgrade all packages
      yum: name=* state=latest
      when: ansible_os_family == "RedHat"

    - name: Clear yum cache
      command: /usr/bin/yum clean all warn=false
      when: ansible_os_family == "RedHat"

    - name: Ensure SELinux is disabled
      selinux: policy=targeted state=disabled
      when: ansible_os_family == "RedHat"

    - name: Create the AMI
      delegate_to: localhost
      ec2_ami:
        name: "dcos-ami-{{ ansible_date_time.iso8601_basic_short }}"
        instance_id: "{{ ec2_id }}"
        region: "{{ region }}"
        aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        wait: no
        device_mapping:
          - device_name: /dev/sda1
            size: "{{ server_root_volume_size }}"
            delete_on_termination: true
            volume_type: gp2
          - device_name: /dev/sdf
            size: "{{ server_data_disks_size_gb }}"
            delete_on_termination: true
            volume_type: gp2
