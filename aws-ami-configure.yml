#
# Configuration of instance
#
- name: Configuration of instance
  hosts: "tag_Role_dcos:&tag_Type_ami"
  become: yes
  vars_files:
    - "vars/{{ varfile }}"
  pre_tasks:
    - name: Remove require tty
      lineinfile: regexp="Defaults\s+requiretty" dest=/etc/sudoers state=absent
      tags:
        - configure

    - name: Do not use DNS resolution for SSH
      lineinfile: regexp="Use\s+DNS" dest=/etc/ssh/sshd_config state=absent
      tags:
        - configure

    - name: Do not use DNS resolution for SSH
      lineinfile: regexp="^Use\s+DNS" dest=/etc/ssh/sshd_config  line="UseDNS no" state=present
      tags:
        - configure

    - name: Restart SSH
      service: name=sshd state=restarted
      tags:
        - configure

    - name: Turn off ipv6
      sysctl: name=net.ipv6.conf.all.disable_ipv6 value=1 state=present
      tags:
        - configure

    - name: Turn off ipv6
      sysctl: name=net.ipv6.conf.default.disable_ipv6 value=1 state=present
      tags:
        - configure

    - name: Turn down vm.swappiness setting
      sysctl: name=vm.swappiness value=5 state=present
      tags:
        - configure
  roles:
    - { role: docker,         tags: ['configure'] }
    - { role: docker-disk,    tags: ['configure'] }
    - { role: gluster-client, tags: ['configure'] }
  tasks:

    - name: Install Python virtualenv
      yum: name=python-pip state=latest
      when: ansible_os_family == "RedHat"

    - name: Install virtualenv
      pip: name=virtualenv

    - name: Ensure Docker is automatically started
      service: name=docker enabled=yes

    - name: Upgrade all packages
      yum: name=* state=latest
      when: ansible_os_family == "RedHat"
      tags:
        - configure

    - name: Clear yum cache
      command: /usr/bin/yum clean all warn=false
      when: ansible_os_family == "RedHat"
      tags:
        - configure

    - name: Ensure SELinux is disabled
      selinux: policy=targeted state=disabled
      when: ansible_os_family == "RedHat"
      tags:
        - configure

#
# Creation of AMI
#
- name: Creation of AMI
  hosts: "tag_Role_dcos:&tag_Type_ami"
  become: yes
  vars_files:
    - "vars/{{ varfile }}"
  tasks:
    - name: Create the AMI
      delegate_to: localhost
      tags:
        - ami
      ec2_ami:
        name: "{{ ec2_tag_Name }}"
        instance_id: "{{ ec2_id }}"
        region: "{{ region }}"
        aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        wait: no
        device_mapping:
          - device_name: /dev/sda1
            size: "{{ server_root_volume_size }}"
            delete_on_termination: true
            volume_type: gp2
          - device_name: /dev/sdf
            size: "{{ server_data_disks_size_gb }}"
            delete_on_termination: true
            volume_type: gp2
